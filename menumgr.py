#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
handle the menu xml parsing and data management, structure generation
"""

from __future__ import print_function
import xml.dom.minidom
from form import Form

class MenuItem(object):
    """the item definition under a menu or submenu, currently there are
    only two types of menu item, submenu or form
    """
    FormType = 0
    MenuType = 1

    def __init__(self):
        self._title = ''
        self._type = MenuItem.FormType
        self._typestring = "form"
        self._desc = ''
        self._ref = ''
        self._formid= ''    #Added by Hope

    def set_formid(self, formid):
        self._formid = formid

    def set_title(self, title):
        self._title = title

    def set_type(self, typename):
        self._typestring = typename
        if typename == "form":
            self._type = MenuItem.FormType
        elif typename == "menu":
            self._type = MenuItem.MenuType
        else:
            raise Exception("MenuItem: wrong type %s" % typename)

    def set_desc(self, desc):
        self._desc = desc

    def get_formid(self):
        return self._formid

    def get_title(self):
        return self._title

    def get_desc(self):
        return self._desc

    def get_type(self, return_string=True):
        if return_string:
            return self._typestring
        else:
            return self._type

    def __repr__(self):
        return ("title: {title}\n"
                "type: {type}\n"
                "description: {desc}").format(
            title=self._title, type=self._typestring, desc=self._desc
        )

    def get_ref(self):
        return self._ref

    def set_ref(self, ref):
        self._ref = ref


class Menu(object):
    """definition for a Menu, has list member for all its items
    the item will be a tuple with (index, menuitem)

    :type mid: str
    :param mid: the menu id defined in the menu xml file for each menu
    """
    def __init__(self, mid):
        self._id = mid
        self._title = ''
        self._items = []

    def set_title(self, title):
        self._title = title

    def add_item(self, index, item):
        self._items.append((index, item))

    def __repr__(self):
        s = ""
        for index, item in self._items:
            s += item.get_title() + "\n"
        return s

    def get_items(self):
        return self._items

    def get_id(self):
        return self._id

    def show_items(self):
        for index ,item in self._items():
            print(item.get_title())

    def get_item(self, index):
        return self._items[index]

    def get_title(self):
        return self._title


class ConsoleModel(object):
    """used for console navigation routing, and generated by MenuManager
    console will use absolute menu item path to do navigation, and this
    model will store the path to item mapping, privide a interface to
    find a item by given path

    the Menu and Form will have ConsoleModel object for each themself
    including their own path mapping. and of course, for model of menu
    the item returned by find interface will be Menu object. for model
    of form, the item returned by find interface will be Form object.
    """
    def __init__(self):
        self._model = {'root': None}

    def find_by_path(self, path):
        return self._model.get(path, None)

    def set_by_path(self, path, data):
        self._model[path] = data

    def set_root(self, data):
        self._model['root'] = data


class MenuManager(object):
    """a manager utils to manage all the menu and its item, build related
    structures for flexible flexibility.

    currently the mainly purpose of the manager is to build the console
    model data, actually it also build other structures for earlier design.
    """
    def __init__(self):
        self._main = None
        self._subs = []
        self._item_menu_map = {}
        self._menu_backward_map = {}
        self._current_menu = None
        self._item_form = None   #added by Hope
        self._menu_console_model = ConsoleModel()
        self._form_console_model = ConsoleModel()

    def _new_path(self, old, part):
        if old == '':
            return part
        return old + '.' + part

    def get_menu_model(self):
        return self._menu_console_model

    def get_form_model(self):
        return self._form_console_model

    def show_path_info(self):
        for path, item in self._menu_path_map.items():
            print("path: %s, item: %s" % (path, item.get_title()))

        for path, item in self._form_path_map.items():
            print("path: %s, item: %s" % (path, item.get_title()))

    def build(self):
        """use the recursive way to build the console model structure

        note:
          backward_map and menu_map structure currently is not used,
          they are for earlier design, but just leave it here for later usage
        """
        path = ""
        def recursive_build(parent, path):
            for index, item in parent.get_items():
                if item.get_type(return_string=False) == MenuItem.MenuType:
                    ref = item.get_ref()
                    for menu in self._subs:
                        if menu.get_id() != ref:
                            continue
                        self._item_menu_map[item] = menu
                        self._menu_backward_map[menu] = parent
                        newpath = self._new_path(path, str(index))
                        self._menu_console_model.set_by_path(newpath, menu)
                        recursive_build(menu, newpath)
                elif item.get_type(return_string=False) == MenuItem.FormType:
                    newpath = self._new_path(path, str(index))
                    form = Form(item)
                    self._form_console_model.set_by_path(newpath, form)
                    
        self._menu_console_model.set_root(self._main)
        recursive_build(self._main, path)

    def add(self, menu, ismain):
        if ismain:
            if self._main is not None:
                raise Exception("only one main menu should be defined")
            self._main = menu
        else:
            self._subs.append(menu)

    def _recursive_show_debug(self, parent, level):
        for index, item in parent.get_items():
            print("   " * (level), end="")
            print(item.get_title())
            if item.get_type(return_string=False) == MenuItem.MenuType:
                ref = item.get_ref()
                for menu in self._subs:
                    if menu.get_id() != ref:
                        continue
                    self._recursive_show_debug(menu, level + 1)

    def show_debug(self):
        """show the topology of the all menus"""
        level = 0
        self._recursive_show_debug(self._main, level=0)

    def show_menu(self, menu):
        for index, item in menu.get_items():
            print(item.get_title())

    def show_main(self):
        self.show_menu(self._main)

    def execute_item(self, index):
        formType=False
        item = self._current_menu.get_item(index)
        if item.get_type(return_string=False) == MenuItem.FormType:
            formType=True
            #print("find a form, going to show the form, the id is "+ item.get_formid())
        elif item.get_type(return_string=False) == MenuItem.MenuType:
            formType=False
            next_menu = self._item_menu_map[item]
            self._current_menu = next_menu
        return formType

    def startup(self):
        self._current_menu = self._main

    def list_current_items(self):
        return [item.get_title() for index, item in self._current_menu.get_items()]

    def upward_menu(self):
        menu = self._menu_backward_map.get(self._current_menu, None)
        if menu is not None:
            self._current_menu = menu
        else:
            print("")
            #print("this is the toppest level of menu")

    def current_title(self):
        return self._current_menu.get_title()


# all the dirty code here
def parse_menu_document(xmldocument):
    """pars all the menu document"""
    menumgr = MenuManager()
    dom = xml.dom.minidom.parse(xmldocument)

    for node in dom.getElementsByTagName("Menu"):
        mid = node.getAttribute('id')
        title = node.getAttribute('title')
        menu = Menu(mid)
        menu.set_title(title)
        index = 0
        for item in parse_menu_items(node):
            index += 1
            menu.add_item(index, item)

        menumgr.add(menu, mid == "main")
    return menumgr


def parse_menu_items(menunode):
    """parse the menu item"""
    for node in menunode.getElementsByTagName("Item"):
        item = MenuItem()
        item.set_type(node.getAttribute("type"))
        item.set_title(node.getAttribute("title"))
        item.set_desc(node.getAttribute("desc"))
        item.set_ref(node.getAttribute("ref"))
        item.set_formid(node.getAttribute("formid"))
        yield item
